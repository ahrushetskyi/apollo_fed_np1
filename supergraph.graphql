schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.2", for: EXECUTION)
{
  query: Query
}

directive @join__field(graph: join__Graph!, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

type Action
  @join__type(graph: SCHEMAA, key: "id")
{
  config: ActionConfig!
  defaultTemplate: Template!
  delay: Int!
  id: ID!
}

union ActionConfig
  @join__type(graph: SCHEMAA)
 = ConfigOne | ConfigThree | ConfigTwo

type ConfigOne
  @join__type(graph: SCHEMAA)
{
  id: ID!
  otherTemplate: Template!
  someTemplate: Template!
}

type ConfigThree
  @join__type(graph: SCHEMAA)
{
  id: ID!
  wrongTemplate: Template!
}

type ConfigTwo
  @join__type(graph: SCHEMAA)
{
  id: ID!
  leftTemplate: Template!
  rightTemplate: Template!
}

scalar join__FieldSet

enum join__Graph {
  SCHEMAA @join__graph(name: "schemaA", url: "http://localhost:5003/")
  SCHEMAB @join__graph(name: "schemaB", url: "http://localhost:5004/")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Query
  @join__type(graph: SCHEMAA)
  @join__type(graph: SCHEMAB)
{
  actions: [Action!]! @join__field(graph: SCHEMAA)
}

type Template
  @join__type(graph: SCHEMAA, key: "id", extension: true)
  @join__type(graph: SCHEMAB, key: "id")
{
  id: ID!
  body: String! @join__field(graph: SCHEMAB)
  name: String! @join__field(graph: SCHEMAB)
}